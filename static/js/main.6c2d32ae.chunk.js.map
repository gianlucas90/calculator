{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","valueDisplayed","updValueDisplayed","handleClick","e","target","id","prevValue","test","spaceRemoved","replace","matchOperands","match","matchOperandsString","toString","replacement","final","evaluate","className","onClick","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c2d32ae.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { evaluate } from \"mathjs\";\n\nfunction App() {\n  // Set the initial states of the displayed value\n  const [valueDisplayed, updValueDisplayed] = useState(() => \"0\");\n  // Set the initial states of the operands\n  const [operands, updOperands] = useState(() => []);\n\n  const handleClick = (e) => {\n    const testRegexDecimal = /\\.$|\\.\\d{1,}$/;\n    const testRegexOperatorAdd = /(\\+\\s)$/;\n    const testRegexOperatorSubtract = /(\\-\\s)$/;\n    const testRegexOperatorMultiply = /(\\*\\s)$/;\n    const testRegexOperatorDivide = /(\\/\\s)$/;\n    const matchDoubleOperands = /([\\+\\-\\*\\/]\\s){1,}[\\+\\*\\/]/g;\n    const regexReplacement = /[\\+\\*\\/]$/g;\n\n    if (valueDisplayed == \"0\") {\n      updValueDisplayed(\"\");\n    }\n    switch (e.target.id) {\n      //Numbers\n      case \"zero\":\n        updValueDisplayed((prevValue) => prevValue + \"0\");\n        break;\n      case \"one\":\n        updValueDisplayed((prevValue) => prevValue + \"1\");\n        break;\n      case \"two\":\n        updValueDisplayed((prevValue) => prevValue + \"2\");\n        break;\n      case \"three\":\n        updValueDisplayed((prevValue) => prevValue + \"3\");\n        break;\n      case \"four\":\n        updValueDisplayed((prevValue) => prevValue + \"4\");\n        break;\n      case \"five\":\n        updValueDisplayed((prevValue) => prevValue + \"5\");\n        break;\n      case \"six\":\n        updValueDisplayed((prevValue) => prevValue + \"6\");\n        break;\n      case \"seven\":\n        updValueDisplayed((prevValue) => prevValue + \"7\");\n        break;\n      case \"eight\":\n        updValueDisplayed((prevValue) => prevValue + \"8\");\n        break;\n      case \"nine\":\n        updValueDisplayed((prevValue) => prevValue + \"9\");\n        break;\n      // Operators\n      case \"add\":\n        if (!testRegexOperatorAdd.test(valueDisplayed)) {\n          updValueDisplayed((prevValue) => prevValue + \" + \");\n        }\n        break;\n      case \"subtract\":\n        if (!testRegexOperatorSubtract.test(valueDisplayed)) {\n          updValueDisplayed((prevValue) => prevValue + \" - \");\n        }\n        break;\n      case \"multiply\":\n        if (!testRegexOperatorMultiply.test(valueDisplayed)) {\n          updValueDisplayed((prevValue) => prevValue + \" * \");\n        }\n        break;\n      case \"divide\":\n        if (!testRegexOperatorDivide.test(valueDisplayed)) {\n          updValueDisplayed((prevValue) => prevValue + \" / \");\n        }\n        break;\n      // clear\n      case \"clear\":\n        updValueDisplayed(\"0\");\n        break;\n      // Equals\n      case \"equals\":\n        const spaceRemoved = valueDisplayed.replace(/\\s{2,}/g, \" \");\n        const matchOperands = spaceRemoved.match(matchDoubleOperands);\n\n        if (matchOperands) {\n          const matchOperandsString = matchOperands.toString();\n          const replacement = matchOperandsString.match(regexReplacement);\n          const final = spaceRemoved.replace(matchOperandsString, replacement);\n          updValueDisplayed(evaluate(final));\n        } else {\n          updValueDisplayed(evaluate(spaceRemoved));\n        }\n        break;\n      // Decimal\n      case \"decimal\":\n        if (!testRegexDecimal.test(valueDisplayed)) {\n          updValueDisplayed((prevValue) => prevValue + \".\");\n        }\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"display\">{valueDisplayed}</div>\n      <div id=\"clear\" className=\"btn\" onClick={handleClick}>\n        Ac\n      </div>\n      <div id=\"add\" className=\"btn btn-operator\" onClick={handleClick}>\n        +\n      </div>\n      <div id=\"subtract\" className=\"btn btn-operator\" onClick={handleClick}>\n        -\n      </div>\n      <div id=\"multiply\" className=\"btn btn-operator\" onClick={handleClick}>\n        x\n      </div>\n      <div id=\"divide\" className=\"btn btn-operator\" onClick={handleClick}>\n        /\n      </div>\n      <div id=\"equals\" className=\"btn\" onClick={handleClick}>\n        =\n      </div>\n      <div id=\"decimal\" className=\"btn btn-number\" onClick={handleClick}>\n        .\n      </div>\n      <div id=\"zero\" className=\"btn btn-number\" onClick={handleClick}>\n        0\n      </div>\n      <div id=\"one\" className=\"btn btn-number\" onClick={handleClick}>\n        1\n      </div>\n      <div id=\"two\" className=\"btn btn-number\" onClick={handleClick}>\n        2\n      </div>\n      <div id=\"three\" className=\"btn btn-number\" onClick={handleClick}>\n        3\n      </div>\n      <div id=\"four\" className=\"btn btn-number\" onClick={handleClick}>\n        4\n      </div>\n      <div id=\"five\" className=\"btn btn-number\" onClick={handleClick}>\n        5\n      </div>\n      <div id=\"six\" className=\"btn btn-number\" onClick={handleClick}>\n        6\n      </div>\n      <div id=\"seven\" className=\"btn btn-number\" onClick={handleClick}>\n        7\n      </div>\n      <div id=\"eight\" className=\"btn btn-number\" onClick={handleClick}>\n        8\n      </div>\n      <div id=\"nine\" className=\"btn btn-number\" onClick={handleClick}>\n        9\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}